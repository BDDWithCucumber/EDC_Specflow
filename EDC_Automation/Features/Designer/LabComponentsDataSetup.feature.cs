// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EDC_Automation.Features.Designer
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DataLabs_V5.8.0_Designer Lab Components Data Setup")]
    public partial class DataLabs_V5_8_0_DesignerLabComponentsDataSetupFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "LabComponentsDataSetup.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DataLabs_V5.8.0_Designer Lab Components Data Setup", "\tTest Summary:\r\n\t1. Data Setup for Lab Mappings\r\n\t2. Data Setup for Attribute Map" +
                    "pings (Codelist Mappings)\r\n\t3. Data Setup for Lab Dictionary mappings", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T01_When I Login to Designer then I see the Designer home page")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:US63653.01")]
        public virtual void T01_WhenILoginToDesignerThenISeeTheDesignerHomePage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T01_When I Login to Designer then I see the Designer home page", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:US63653.01"});
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
 testRunner.Given("I logged in to Designer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.Then("I see Designer Home Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T02_Create CodeLists and CodeLists Items")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:US63653.02")]
        public virtual void T02_CreateCodeListsAndCodeListsItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T02_Create CodeLists and CodeLists Items", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:US63653.02"});
#line 13
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 14
 testRunner.When("I click on the Home Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
 testRunner.And("I click on the Link \"Linkages_22\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("I click on the Labs Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "GenderEvent",
                        "GenderForm",
                        "GenderItem",
                        "DOBAge",
                        "DOBEvent",
                        "DOBForm",
                        "DOBItem",
                        "Male",
                        "Female",
                        "NotSpecified",
                        "DOBEvent1",
                        "DOBForm1",
                        "DOBItem1",
                        "DOBEvent2",
                        "DOBForm2",
                        "DOBItem2"});
            table1.AddRow(new string[] {
                        "Event1",
                        "TestForm",
                        "Gender (Gender)",
                        "Age",
                        "Event1",
                        "TestForm",
                        "Age (Age)",
                        "Male",
                        "Female",
                        "Not Specified",
                        "Event1",
                        "TestForm",
                        "AgeUnits (AgeUnit)",
                        "Event1",
                        "TestForm",
                        "Age (Age)"});
#line 17
 testRunner.Then("I add the below labs items and I should see the successful notification message", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T03_Create CodeLists and CodeLists Items")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:US63653.03")]
        public virtual void T03_CreateCodeListsAndCodeListsItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T03_Create CodeLists and CodeLists Items", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:US63653.03"});
#line 22
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 23
 testRunner.When("I click on the Home Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.And("I click on the Link \"Import_Study\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.And("I click on the Labs Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("I click on the \"Lab Mapping\" tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "MappingElement",
                        "RowNo",
                        "DomainItem"});
            table2.AddRow(new string[] {
                        "Lab Id",
                        "2",
                        "LabId"});
            table2.AddRow(new string[] {
                        "Lab Name",
                        "3",
                        "LabName"});
            table2.AddRow(new string[] {
                        "Company",
                        "4",
                        "Company"});
            table2.AddRow(new string[] {
                        "Lab Address",
                        "5",
                        "LabAddress"});
            table2.AddRow(new string[] {
                        "Country",
                        "6",
                        "Country"});
            table2.AddRow(new string[] {
                        "CRF Collection Date",
                        "8",
                        "CRFCollectionDate"});
            table2.AddRow(new string[] {
                        "CRF Lab Test Name",
                        "9",
                        "CRFLabTestName"});
            table2.AddRow(new string[] {
                        "Lab Test Description",
                        "10",
                        "LabTestDescription"});
            table2.AddRow(new string[] {
                        "CRF Lab Value *",
                        "11",
                        "CRFLabValue"});
            table2.AddRow(new string[] {
                        "CRF Lab (Original) Unit *",
                        "12",
                        "CRFLabUnit"});
            table2.AddRow(new string[] {
                        "Lab Test Name",
                        "14",
                        "LabTestName"});
            table2.AddRow(new string[] {
                        "Lab Test Code",
                        "15",
                        "LabTestCode"});
            table2.AddRow(new string[] {
                        "LOINC Code",
                        "16",
                        "LOINCCode"});
            table2.AddRow(new string[] {
                        "Category",
                        "17",
                        "Category"});
            table2.AddRow(new string[] {
                        "Subcategory",
                        "18",
                        "Subcategory"});
            table2.AddRow(new string[] {
                        "Specimen",
                        "19",
                        "Specimen"});
            table2.AddRow(new string[] {
                        "Method",
                        "20",
                        "Method"});
            table2.AddRow(new string[] {
                        "Result Type",
                        "21",
                        "ResultType"});
            table2.AddRow(new string[] {
                        "Normal Reference Range Low",
                        "23",
                        "NRRL"});
            table2.AddRow(new string[] {
                        "Normal Reference Range High",
                        "24",
                        "NRRH"});
            table2.AddRow(new string[] {
                        "Critical Reference Range Low",
                        "25",
                        "CRRL"});
            table2.AddRow(new string[] {
                        "Critical Reference Range High",
                        "26",
                        "CRRH"});
            table2.AddRow(new string[] {
                        "Reference Range Not Applicable",
                        "27",
                        "RRNA"});
            table2.AddRow(new string[] {
                        "Reference Range ID",
                        "28",
                        "RRID"});
            table2.AddRow(new string[] {
                        "Out of Normal Range Indicator",
                        "29",
                        "OutofNRI"});
            table2.AddRow(new string[] {
                        "Normalized Patient Lab Value",
                        "31",
                        "NPLV"});
            table2.AddRow(new string[] {
                        "Normalized Lab Unit",
                        "32",
                        "NLU"});
            table2.AddRow(new string[] {
                        "Normalized Normal Reference Range Low",
                        "33",
                        "NNRRL"});
            table2.AddRow(new string[] {
                        "Normalized Normal Reference Range High",
                        "34",
                        "NNRRH"});
            table2.AddRow(new string[] {
                        "Normalized Critical Reference Range Low",
                        "35",
                        "NCRRL"});
            table2.AddRow(new string[] {
                        "Normalized Critical Reference Range High",
                        "36",
                        "NCRRH"});
            table2.AddRow(new string[] {
                        "Precision",
                        "37",
                        "Precision"});
            table2.AddRow(new string[] {
                        "Conversion Factor",
                        "38",
                        "Conversion Factor"});
#line 27
 testRunner.Then("I add the below labs items for domain \"NewDomain\" and I should see the successful" +
                    " notification message", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T04_Create CodeLists and CodeLists Items")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:US63653.04")]
        public virtual void T04_CreateCodeListsAndCodeListsItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T04_Create CodeLists and CodeLists Items", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:US63653.04"});
#line 64
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 65
    testRunner.When("I click on the Home Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.And("I click on the Link \"Import_Study\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.And("I click on the Labs Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And("I click on the Link \"Map Lab Dictionary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.And("Select the LabDict name \"LabDict1 (LabDictDesc1) \"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "LabTestName",
                        "DisplayinRR"});
            table3.AddRow(new string[] {
                        "LabTests-CRF Lab Test -1 (CRF Lab Test -1)",
                        "Yes"});
#line 70
 testRunner.And("click on the tab Lab Test and select the below lab tests", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "LabTestName"});
            table4.AddRow(new string[] {
                        "LabUnits-CRF Lab Unit - 1 (CRF Lab Unit - 1)"});
#line 73
 testRunner.And("click on the tab Lab Unit and select the below lab units", ((string)(null)), table4, "And ");
#line 76
 testRunner.And("I click on map lab dict Save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

