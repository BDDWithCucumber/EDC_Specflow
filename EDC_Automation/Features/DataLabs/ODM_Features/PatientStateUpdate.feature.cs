// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EDC_Automation.Features.DataLabs.ODM_Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DataLabs_V5.7.0_ODMEventingforPatientStateUpdate")]
    public partial class DataLabs_V5_7_0_ODMEventingforPatientStateUpdateFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PatientStateUpdate.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DataLabs_V5.7.0_ODMEventingforPatientStateUpdate", @"	Test Summary:
	1. Verification of ODM eventing xml for Patient State Update on Freeze single patient
	2. Verification of ODM eventing xml for Patient State Update on Thaw single patient
	3. Verification of ODM eventing xml for Patient State Update on Lock single patient
	4. Verification of ODM eventing xml for Patient State Update on unlock single patient
	5. Verification of ODM eventing xml for Patient State Update on Freeze multiple patients
	6. Verification of ODM eventing xml for Patient State Update on Thaw multiple patients
	7. Verification of ODM eventing xml for Patient State Update on Lock multiple patients
	8. Verification of ODM eventing xml for Patient State Update on Unlock multiple patients
	9. Verification of ODM eventing xml for Patient State Update on Freeze Patient by a form freeze
	10. Verification of ODM eventing xml for Patient State Update on Thaw Patient by a form thaw", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T01_Login to Datalabs")]
        public virtual void T01_LoginToDatalabs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T01_Login to Datalabs", null, ((string[])(null)));
#line 15
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 16
  testRunner.Given("I logged in to DataLabs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
  testRunner.Then("I see Datalabs Home Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T02_Delete the current study")]
        public virtual void T02_DeleteTheCurrentStudy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T02_Delete the current study", null, ((string[])(null)));
#line 19
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 20
  testRunner.When("I delete study", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
  testRunner.Then("I see study label \"No Study Loaded\" in header", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T03_Publish a study")]
        public virtual void T03_PublishAStudy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T03_Publish a study", null, ((string[])(null)));
#line 23
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 24
 testRunner.When("I click breadcrumb \"Study Management\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.And("I upload a study \"Test3210_Base_ODMStudy_1\" with study label \"TestBase\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.Then("I see study label \"Test3210_Query Smoke Test\" in header", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T04_Add Sites")]
        public virtual void T04_AddSites()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T04_Add Sites", null, ((string[])(null)));
#line 28
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 29
 testRunner.When("I select DataManagerPortal item \"Study Administration\" from drop down", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.And("I click Link \"Site Management\" In StudyAdministrationPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "SiteId",
                        "SiteName",
                        "Address1",
                        "Address2",
                        "Address3",
                        "Address4",
                        "City",
                        "State",
                        "Zip",
                        "ISOCountry",
                        "Country",
                        "Phone",
                        "Fax",
                        "SiteStatus",
                        "DCFWorkflow",
                        "ExternalSource",
                        "ExternalId"});
            table1.AddRow(new string[] {
                        "01",
                        "Site",
                        "ADDRESS",
                        "ADDRESS",
                        "ADDRESS",
                        "ADDRESS",
                        "Hyderabad",
                        "AP",
                        "500060",
                        "INDIA(IND)",
                        "India",
                        "9999999999",
                        "66666666666",
                        "Active",
                        "Electronic",
                        "No",
                        "-"});
#line 31
 testRunner.And("I enter sites details and Save", ((string)(null)), table1, "And ");
#line 34
 testRunner.Then("I see site \"01-Site\" in SiteManagementPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T05_Assign testadmin testadmin user to site 01")]
        public virtual void T05_AssignTestadminTestadminUserToSite01()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T05_Assign testadmin testadmin user to site 01", null, ((string[])(null)));
#line 36
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 37
 testRunner.When("I open site with siteid \"01\" and site name \"Site\" from SiteManagement page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.And("I click ActionPalette Item \"Manage Users\" in \"SiteActions\" ActionPalette", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.And("I add and save user \"testadmin testadmin\" to site users in SiteManageUsersPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.Then("I see Site details page for \"01-Site\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T06_Navigate to the Edit Preferences page and set the CRF Default save to Complet" +
            "e and update the Endpoint URL")]
        public virtual void T06_NavigateToTheEditPreferencesPageAndSetTheCRFDefaultSaveToCompleteAndUpdateTheEndpointURL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T06_Navigate to the Edit Preferences page and set the CRF Default save to Complet" +
                    "e and update the Endpoint URL", null, ((string[])(null)));
#line 42
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 43
 testRunner.When("I click breadcrumb \"Study Administration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.When("I click Link \"Study Management\" In StudyAdministrationPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.And("I click ActionPalette Item \"Edit Preferences\" in \"StudyResetAction\" ActionPalette" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And("I open tab \"Forms\" in StudyEditPreferencesPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.And("I select the \"Complete\" for Default Save: in StudyEditPreferencesFormsPage.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.And("I open tab \"patient data eventing\" in StudyEditPreferencesPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.And("I update the endpoint URL under Patient Data Eventing tab.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.And("I click \"Save\" button on the Edit Preferences page.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.Then("I verify the success message displayed as \"Edit Preferences Successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T07_Navigate to Patients tab and select a site and add patient(s).")]
        public virtual void T07_NavigateToPatientsTabAndSelectASiteAndAddPatientS_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T07_Navigate to Patients tab and select a site and add patient(s).", null, ((string[])(null)));
#line 53
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 54
 testRunner.Given("I navigate to \"Patients\" tab from main menu.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
 testRunner.And("I select the site \"01-Site\" from Sites dropdown.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ScreenID",
                        "PatientInitials",
                        "ScreenDate"});
            table2.AddRow(new string[] {
                        "02",
                        "PAT",
                        "10/05/2018"});
            table2.AddRow(new string[] {
                        "03",
                        "PAT",
                        "10/05/2018"});
#line 56
 testRunner.When("I add patient with below details.", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "PatientID"});
            table3.AddRow(new string[] {
                        "02-PAT"});
            table3.AddRow(new string[] {
                        "03-PAT"});
#line 60
 testRunner.Then("I see below patients added in the Patients table.", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T08_Freeze the patient")]
        public virtual void T08_FreezeThePatient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T08_Freeze the patient", null, ((string[])(null)));
#line 66
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 67
 testRunner.Given("I click ActionPalette Item \"Freeze Patients\" in \"PatientSiteActions\" ActionPalett" +
                    "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "PatientID"});
            table4.AddRow(new string[] {
                        "02-PAT"});
#line 68
 testRunner.When("I select patients to freeze in FreezePatientsPage", ((string)(null)), table4, "When ");
#line 71
 testRunner.And("I click on Save button on in FreezepatientsPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.Then("I verify the success message displayed as \"Freeze Patient Successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T09_Verify the XML Data evented out for the Freeze Patient from Datalabs UI")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:3.1.2.5")]
        public virtual void T09_VerifyTheXMLDataEventedOutForTheFreezePatientFromDatalabsUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T09_Verify the XML Data evented out for the Freeze Patient from Datalabs UI", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:3.1.2.5"});
#line 75
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 76
 testRunner.Given(@"I save the Event XML data in ""FreezePatientFromUIActual.xml"" file by executing the query ""Select Top 1 XmlMessage from OdmSubscriberDetail where StudyEventKey = 4 and XmlMessage like '%<ReasonForChange>Frozen</ReasonForChange>%' order by OdmSubscriberDetailKey desc""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 77
 testRunner.And("I have the XML file \"FreezePatientFromUIExpected.xml\" available in the project fo" +
                    "lder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
 testRunner.And("I have the XML file \"FreezePatientFromUIActual.xml\" available in the Test XML Fil" +
                    "es folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "TagName",
                        "FieldName"});
            table5.AddRow(new string[] {
                        "",
                        "CreationDateTime"});
            table5.AddRow(new string[] {
                        "",
                        "DateTimeStamp"});
            table5.AddRow(new string[] {
                        "",
                        "SubjectKey"});
            table5.AddRow(new string[] {
                        "",
                        "FileOID"});
            table5.AddRow(new string[] {
                        "",
                        "SourceID"});
            table5.AddRow(new string[] {
                        "",
                        "SourceSystemVersion"});
#line 79
 testRunner.Then("I verify that the data in both XML files is same except for below tags and fields" +
                    ".", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T10_Lock the patient")]
        public virtual void T10_LockThePatient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T10_Lock the patient", null, ((string[])(null)));
#line 89
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 90
 testRunner.Given("I click ActionPalette Item \"Lock Patients\" in \"PatientSiteActions\" ActionPalette", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "PatientID"});
            table6.AddRow(new string[] {
                        "02-PAT"});
#line 91
 testRunner.When("I select patients to lock in LockPatientsPage", ((string)(null)), table6, "When ");
#line 94
 testRunner.And("I click on Save button on in LockPatientsPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.Then("I verify the success message displayed as \"Lock Patient Successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T11_Verify the XML Data evented out for the Locked Patient from Datalabs UI")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:3.1.2.5")]
        public virtual void T11_VerifyTheXMLDataEventedOutForTheLockedPatientFromDatalabsUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T11_Verify the XML Data evented out for the Locked Patient from Datalabs UI", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:3.1.2.5"});
#line 97
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 98
 testRunner.Given("I save the Event XML data in \"LockPatientFromUIActual.xml\" file by executing the " +
                    "query \"Select Top 1 XmlMessage from OdmSubscriberDetail where StudyEventKey = 4 " +
                    "order by OdmSubscriberDetailKey desc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 99
 testRunner.And("I have the XML file \"LockPatientFromUIExpected.xml\" available in the project fold" +
                    "er.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
 testRunner.And("I have the XML file \"LockPatientFromUIActual.xml\" available in the Test XML Files" +
                    " folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "TagName",
                        "FieldName"});
            table7.AddRow(new string[] {
                        "",
                        "CreationDateTime"});
            table7.AddRow(new string[] {
                        "",
                        "DateTimeStamp"});
            table7.AddRow(new string[] {
                        "",
                        "SubjectKey"});
            table7.AddRow(new string[] {
                        "",
                        "SourceID"});
            table7.AddRow(new string[] {
                        "",
                        "FileOID"});
            table7.AddRow(new string[] {
                        "",
                        "SourceSystemVersion"});
#line 101
 testRunner.Then("I verify that the data in both XML files is same except for below tags and fields" +
                    ".", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T12_Unlock Patient")]
        public virtual void T12_UnlockPatient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T12_Unlock Patient", null, ((string[])(null)));
#line 111
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 112
 testRunner.Given("I click ActionPalette Item \"Unlock Patients\" in \"PatientSiteActions\" ActionPalett" +
                    "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "PatientID"});
            table8.AddRow(new string[] {
                        "02-PAT"});
#line 113
 testRunner.When("I select patients to Unlock in UnlockPatientsPage", ((string)(null)), table8, "When ");
#line 116
 testRunner.And("I click on Save button on in UnlockPatientsPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
 testRunner.Then("I verify the success message displayed as \"Unlock Patient Successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T13_Verify the XML Data evented out for the Unlocked Patient from Datalabs UI")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:3.1.2.5")]
        public virtual void T13_VerifyTheXMLDataEventedOutForTheUnlockedPatientFromDatalabsUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T13_Verify the XML Data evented out for the Unlocked Patient from Datalabs UI", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:3.1.2.5"});
#line 119
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 120
 testRunner.Given("I save the Event XML data in \"UnlockPatientFromUIActual.xml\" file by executing th" +
                    "e query \"Select Top 1 XmlMessage from OdmSubscriberDetail where StudyEventKey = " +
                    "4 order by OdmSubscriberDetailKey desc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 121
 testRunner.And("I have the XML file \"UnlockPatientFromUIExpected.xml\" available in the project fo" +
                    "lder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.And("I have the XML file \"UnlockPatientFromUIActual.xml\" available in the Test XML Fil" +
                    "es folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "TagName",
                        "FieldName"});
            table9.AddRow(new string[] {
                        "",
                        "CreationDateTime"});
            table9.AddRow(new string[] {
                        "",
                        "DateTimeStamp"});
            table9.AddRow(new string[] {
                        "",
                        "SubjectKey"});
            table9.AddRow(new string[] {
                        "",
                        "SourceID"});
            table9.AddRow(new string[] {
                        "",
                        "FileOID"});
            table9.AddRow(new string[] {
                        "",
                        "SourceSystemVersion"});
#line 123
 testRunner.Then("I verify that the data in both XML files is same except for below tags and fields" +
                    ".", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T14_Thaw the Patient")]
        public virtual void T14_ThawThePatient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T14_Thaw the Patient", null, ((string[])(null)));
#line 133
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 134
 testRunner.Given("I click ActionPalette Item \"Thaw Patients\" in \"PatientSiteActions\" ActionPalette", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "PatientID"});
            table10.AddRow(new string[] {
                        "02-PAT"});
#line 135
 testRunner.When("I select patients to Thaw in ThawPatientsPage", ((string)(null)), table10, "When ");
#line 138
 testRunner.And("I click on Save button on in ThawPatientsPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
 testRunner.Then("I verify the success message displayed as \"Thaw Patient Successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T15_Verify the XML Data evented out for the Thaw Patient from Datalabs UI")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:3.1.2.5")]
        public virtual void T15_VerifyTheXMLDataEventedOutForTheThawPatientFromDatalabsUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T15_Verify the XML Data evented out for the Thaw Patient from Datalabs UI", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:3.1.2.5"});
#line 141
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 142
 testRunner.Given("I save the Event XML data in \"ThawPatientFromUIActual.xml\" file by executing the " +
                    "query \"Select Top 1 XmlMessage from OdmSubscriberDetail where StudyEventKey = 4 " +
                    "order by OdmSubscriberDetailKey desc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 143
 testRunner.And("I have the XML file \"ThawPatientFromUIExpected.xml\" available in the project fold" +
                    "er.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
 testRunner.And("I have the XML file \"ThawPatientFromUIActual.xml\" available in the Test XML Files" +
                    " folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "TagName",
                        "FieldName"});
            table11.AddRow(new string[] {
                        "",
                        "CreationDateTime"});
            table11.AddRow(new string[] {
                        "",
                        "DateTimeStamp"});
            table11.AddRow(new string[] {
                        "",
                        "SubjectKey"});
            table11.AddRow(new string[] {
                        "",
                        "SourceID"});
            table11.AddRow(new string[] {
                        "",
                        "FileOID"});
            table11.AddRow(new string[] {
                        "",
                        "SourceSystemVersion"});
#line 145
 testRunner.Then("I verify that the data in both XML files is same except for below tags and fields" +
                    ".", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T16_Freeze CRFs")]
        public virtual void T16_FreezeCRFs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T16_Freeze CRFs", null, ((string[])(null)));
#line 155
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 156
 testRunner.Given("I select the patient \"02-PAT\" from patients table.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 157
 testRunner.And("I click ActionPalette Item \"Freeze CRFs\" in \"PatientPortalActions\" ActionPalette", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "EventName",
                        "FormName"});
            table12.AddRow(new string[] {
                        "Visit (Screening)",
                        "Form1"});
            table12.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form1"});
            table12.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form 2"});
            table12.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form 3"});
            table12.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form 4"});
            table12.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form 5"});
            table12.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form 6"});
            table12.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form 7"});
            table12.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form 8"});
            table12.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form 9"});
            table12.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Duplicate Encoding"});
            table12.AddRow(new string[] {
                        "Common",
                        "Form1"});
            table12.AddRow(new string[] {
                        "Common",
                        "Screened"});
#line 158
 testRunner.When("I select Freeze checkbox for below forms in FreezeCRFsPage", ((string)(null)), table12, "When ");
#line 173
 testRunner.And("I click on \"Freeze\" button in FreezeCRFsPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
 testRunner.Then("I verify the success message displayed as \"Freeze CRFs Successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T17_Verify the XML Data evented out for the Freeze CRF from Datalabs UI")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:3.1.2.5")]
        public virtual void T17_VerifyTheXMLDataEventedOutForTheFreezeCRFFromDatalabsUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T17_Verify the XML Data evented out for the Freeze CRF from Datalabs UI", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:3.1.2.5"});
#line 176
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 177
 testRunner.Given(@"I save the Event XML data in ""FreezePatientFromCRFsActual.xml"" file by executing the query ""Select Top 1 XmlMessage from OdmSubscriberDetail where StudyEventKey=7 and XmlMessage like '%<ReasonForChange>Frozen</ReasonForChange>%' order by OdmSubscriberDetailKey desc""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 178
 testRunner.And("I have the XML file \"FreezePatientFromCRFsExpected.xml\" available in the project " +
                    "folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
 testRunner.And("I have the XML file \"FreezePatientFromCRFsActual.xml\" available in the Test XML F" +
                    "iles folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "TagName",
                        "FieldName"});
            table13.AddRow(new string[] {
                        "",
                        "CreationDateTime"});
            table13.AddRow(new string[] {
                        "",
                        "DateTimeStamp"});
            table13.AddRow(new string[] {
                        "",
                        "SubjectKey"});
            table13.AddRow(new string[] {
                        "",
                        "SourceID"});
            table13.AddRow(new string[] {
                        "",
                        "FileOID"});
            table13.AddRow(new string[] {
                        "",
                        "SourceSystemVersion"});
#line 180
 testRunner.Then("I verify that the data in both XML files is same except for below tags and fields" +
                    ".", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T18_Lock the patient from CRF page")]
        public virtual void T18_LockThePatientFromCRFPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T18_Lock the patient from CRF page", null, ((string[])(null)));
#line 190
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 191
 testRunner.And("I click ActionPalette Item \"Lock Patient\" in \"PatientPortalActions\" ActionPalette" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
 testRunner.When("I click continue in modal dialog having title \"Lock Patient\" and partial message " +
                    "\"Locking this patient will lock patient and all\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 193
 testRunner.Then("I verify the success message displayed as \"Patient has been locked successfully.\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T19_Verify the XML Data evented out for the Locked Patient from Datalabs UI")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:3.1.2.5")]
        public virtual void T19_VerifyTheXMLDataEventedOutForTheLockedPatientFromDatalabsUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T19_Verify the XML Data evented out for the Locked Patient from Datalabs UI", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:3.1.2.5"});
#line 195
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 196
 testRunner.Given("I save the Event XML data in \"LockPatientFromCRFActual.xml\" file by executing the" +
                    " query \"select TOP 1 XmlMessage from OdmSubscriberDetail where StudyEventKey = 4" +
                    " and StatusKey = 311 order by OdmSubscriberDetailKey desc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 197
 testRunner.And("I have the XML file \"LockPatientFromCRFExpected.xml\" available in the project fol" +
                    "der.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 198
 testRunner.And("I have the XML file \"LockPatientFromCRFActual.xml\" available in the Test XML File" +
                    "s folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "TagName",
                        "FieldName"});
            table14.AddRow(new string[] {
                        "",
                        "CreationDateTime"});
            table14.AddRow(new string[] {
                        "",
                        "DateTimeStamp"});
            table14.AddRow(new string[] {
                        "",
                        "SubjectKey"});
            table14.AddRow(new string[] {
                        "",
                        "SourceID"});
            table14.AddRow(new string[] {
                        "",
                        "FileOID"});
            table14.AddRow(new string[] {
                        "",
                        "SourceSystemVersion"});
#line 199
 testRunner.Then("I verify that the data in both XML files is same except for below tags and fields" +
                    ".", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T20_Unlock the patient from CRF page")]
        public virtual void T20_UnlockThePatientFromCRFPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T20_Unlock the patient from CRF page", null, ((string[])(null)));
#line 209
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 210
 testRunner.Given("I click ActionPalette Item \"Unlock Patient\" in \"PatientPortalActions\" ActionPalet" +
                    "te", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 211
 testRunner.When("I click continue in modal dialog having title \"Unlock Patient\" and partial messag" +
                    "e \"Unlocking this patient will unlock patient and all\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 212
 testRunner.Then("I verify the success message displayed as \"Patient has been unlocked successfully" +
                    ".\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T21_Verify the XML Data evented out for the Locked Patient from Datalabs UI")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:3.1.2.5")]
        public virtual void T21_VerifyTheXMLDataEventedOutForTheLockedPatientFromDatalabsUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T21_Verify the XML Data evented out for the Locked Patient from Datalabs UI", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:3.1.2.5"});
#line 214
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 215
 testRunner.Given("I save the Event XML data in \"UnlockPatientFromCRFActual.xml\" file by executing t" +
                    "he query \"select TOP 1 XmlMessage from OdmSubscriberDetail where StudyEventKey =" +
                    " 4 and StatusKey = 311 order by OdmSubscriberDetailKey desc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 216
 testRunner.And("I have the XML file \"UnlockPatientFromCRFExpected.xml\" available in the project f" +
                    "older.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
 testRunner.And("I have the XML file \"UnlockPatientFromCRFActual.xml\" available in the Test XML Fi" +
                    "les folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "TagName",
                        "FieldName"});
            table15.AddRow(new string[] {
                        "",
                        "CreationDateTime"});
            table15.AddRow(new string[] {
                        "",
                        "DateTimeStamp"});
            table15.AddRow(new string[] {
                        "",
                        "SubjectKey"});
            table15.AddRow(new string[] {
                        "",
                        "SourceID"});
            table15.AddRow(new string[] {
                        "",
                        "FileOID"});
            table15.AddRow(new string[] {
                        "",
                        "SourceSystemVersion"});
#line 218
 testRunner.Then("I verify that the data in both XML files is same except for below tags and fields" +
                    ".", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T22_Thaw CRFs")]
        public virtual void T22_ThawCRFs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T22_Thaw CRFs", null, ((string[])(null)));
#line 228
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 229
 testRunner.Given("I click ActionPalette Item \"Thaw CRFs\" in \"PatientPortalActions\" ActionPalette", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 230
 testRunner.When("I click on \"Select All\" button in ThawCRFsPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 231
 testRunner.And("I click on \"Thaw\" button in ThawCRFsPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
 testRunner.Then("I verify the success message displayed as \"Thaw CRFs Successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T23_Verify the XML Data evented out for the Thaw CRF from Datalabs UI")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:3.1.2.5")]
        public virtual void T23_VerifyTheXMLDataEventedOutForTheThawCRFFromDatalabsUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T23_Verify the XML Data evented out for the Thaw CRF from Datalabs UI", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:3.1.2.5"});
#line 234
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 235
 testRunner.Given(@"I save the Event XML data in ""ThawCRFFromCRFActual.xml"" file by executing the query ""Select Top 1 XmlMessage from OdmSubscriberDetail where StudyEventKey=7 and XmlMessage like '%<ReasonForChange>Thawed</ReasonForChange>%' order by OdmSubscriberDetailKey desc""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 236
 testRunner.And("I have the XML file \"ThawCRFFromCRFExpected.xml\" available in the project folder." +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 237
 testRunner.And("I have the XML file \"ThawCRFFromCRFActual.xml\" available in the Test XML Files fo" +
                    "lder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "TagName",
                        "FieldName"});
            table16.AddRow(new string[] {
                        "",
                        "CreationDateTime"});
            table16.AddRow(new string[] {
                        "",
                        "DateTimeStamp"});
            table16.AddRow(new string[] {
                        "",
                        "SubjectKey"});
            table16.AddRow(new string[] {
                        "",
                        "SourceID"});
            table16.AddRow(new string[] {
                        "",
                        "FileOID"});
            table16.AddRow(new string[] {
                        "",
                        "SourceSystemVersion"});
#line 238
 testRunner.Then("I verify that the data in both XML files is same except for below tags and fields" +
                    ".", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T24_Freeze few CRFs")]
        public virtual void T24_FreezeFewCRFs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T24_Freeze few CRFs", null, ((string[])(null)));
#line 248
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 249
 testRunner.Given("I click ActionPalette Item \"Freeze CRFs\" in \"PatientPortalActions\" ActionPalette", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "EventName",
                        "FormName"});
            table17.AddRow(new string[] {
                        "Visit (Screening)",
                        "Form1"});
            table17.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form1"});
            table17.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form 2"});
            table17.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form 3"});
            table17.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form 4"});
            table17.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form 5"});
            table17.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form 6"});
            table17.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form 7"});
            table17.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form 8"});
            table17.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Form 9"});
            table17.AddRow(new string[] {
                        "Visit (Week 2)",
                        "Duplicate Encoding"});
            table17.AddRow(new string[] {
                        "Common",
                        "Form1"});
#line 250
 testRunner.When("I select Freeze checkbox for below forms in FreezeCRFsPage", ((string)(null)), table17, "When ");
#line 264
 testRunner.And("I click on \"Freeze\" button in FreezeCRFsPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 265
 testRunner.Then("I verify the success message displayed as \"Freeze CRFs Successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T25_Freeze one CRF")]
        public virtual void T25_FreezeOneCRF()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T25_Freeze one CRF", null, ((string[])(null)));
#line 268
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 269
 testRunner.Given("I expand \"Common\" to select and open \"Screened\" CRF.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 270
 testRunner.And("I click ActionPalette Item \"Freeze CRF\" in \"CRFAction\" ActionPalette", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 271
 testRunner.Then("I verify the success message displayed as \"CRF Frozen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T26_Verify the XML Data evented out for the Freeze CRF from Datalabs UI")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:3.1.2.5")]
        public virtual void T26_VerifyTheXMLDataEventedOutForTheFreezeCRFFromDatalabsUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T26_Verify the XML Data evented out for the Freeze CRF from Datalabs UI", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:3.1.2.5"});
#line 273
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 274
 testRunner.Given("I save the Event XML data in \"FreezePatientFromCRFFormActual.xml\" file by executi" +
                    "ng the query \"select TOP 1 XmlMessage from OdmSubscriberDetail where StudyEventK" +
                    "ey = 7 and StatusKey = 311 order by OdmSubscriberDetailKey desc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 275
 testRunner.And("I have the XML file \"FreezePatientFromCRFFormExpected.xml\" available in the proje" +
                    "ct folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 276
 testRunner.And("I have the XML file \"FreezePatientFromCRFFormActual.xml\" available in the Test XM" +
                    "L Files folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "TagName",
                        "FieldName"});
            table18.AddRow(new string[] {
                        "",
                        "CreationDateTime"});
            table18.AddRow(new string[] {
                        "",
                        "DateTimeStamp"});
            table18.AddRow(new string[] {
                        "",
                        "SubjectKey"});
            table18.AddRow(new string[] {
                        "",
                        "SourceID"});
            table18.AddRow(new string[] {
                        "",
                        "FileOID"});
            table18.AddRow(new string[] {
                        "",
                        "SourceSystemVersion"});
#line 277
 testRunner.Then("I verify that the data in both XML files is same except for below tags and fields" +
                    ".", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T27_Thaw CRFs")]
        public virtual void T27_ThawCRFs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T27_Thaw CRFs", null, ((string[])(null)));
#line 287
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 288
 testRunner.Given("I click breadcrumb \"02-PAT\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 289
 testRunner.And("I click ActionPalette Item \"Thaw CRFs\" in \"PatientPortalActions\" ActionPalette", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 290
 testRunner.When("I click on \"Select All\" button in ThawCRFsPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 291
 testRunner.And("I click on \"Thaw\" button in ThawCRFsPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 292
 testRunner.Then("I verify the success message displayed as \"Thaw CRFs Successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T28_Freeze the patient")]
        public virtual void T28_FreezeThePatient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T28_Freeze the patient", null, ((string[])(null)));
#line 295
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 296
 testRunner.Given("I click breadcrumb \"All Patients\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 297
 testRunner.And("I click ActionPalette Item \"Freeze Patients\" in \"PatientSiteActions\" ActionPalett" +
                    "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "PatientID"});
            table19.AddRow(new string[] {
                        "02-PAT"});
            table19.AddRow(new string[] {
                        "03-PAT"});
#line 298
 testRunner.When("I select patients to freeze in FreezePatientsPage", ((string)(null)), table19, "When ");
#line 302
 testRunner.And("I click on Save button on in FreezepatientsPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 303
 testRunner.Then("I verify the success message displayed as \"Freeze Patients Successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T29_Verify the XML Data evented out for the Freeze multiple Patients from Datalab" +
            "s UI")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:3.1.2.5")]
        public virtual void T29_VerifyTheXMLDataEventedOutForTheFreezeMultiplePatientsFromDatalabsUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T29_Verify the XML Data evented out for the Freeze multiple Patients from Datalab" +
                    "s UI", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:3.1.2.5"});
#line 305
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 306
 testRunner.Given(@"I save the Event XML data in ""FreezeMultiPatientOneFromUIActual.xml"" file by executing the query ""Select Top 1 XmlMessage from OdmSubscriberDetail where StudyEventKey = 4 and XmlMessage like '%Description=""Patient State""%'+(Select SubjectKey from Patient where PatientIdentity = '02-PAT')+'%' order by OdmSubscriberDetailKey desc""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 307
 testRunner.And("I have the XML file \"FreezeMultiPatientOneFromUIExpected.xml\" available in the pr" +
                    "oject folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 308
 testRunner.And("I have the XML file \"FreezeMultiPatientOneFromUIActual.xml\" available in the Test" +
                    " XML Files folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "TagName",
                        "FieldName"});
            table20.AddRow(new string[] {
                        "",
                        "CreationDateTime"});
            table20.AddRow(new string[] {
                        "",
                        "DateTimeStamp"});
            table20.AddRow(new string[] {
                        "",
                        "SubjectKey"});
            table20.AddRow(new string[] {
                        "",
                        "SourceID"});
            table20.AddRow(new string[] {
                        "",
                        "FileOID"});
            table20.AddRow(new string[] {
                        "",
                        "SourceSystemVersion"});
#line 309
 testRunner.Then("I verify that the data in both XML files is same except for below tags and fields" +
                    ".", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T30_Verify the XML Data evented out for the Freeze multiple Patients from Datalab" +
            "s UI")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:3.1.2.5")]
        public virtual void T30_VerifyTheXMLDataEventedOutForTheFreezeMultiplePatientsFromDatalabsUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T30_Verify the XML Data evented out for the Freeze multiple Patients from Datalab" +
                    "s UI", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:3.1.2.5"});
#line 319
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 320
 testRunner.Given(@"I save the Event XML data in ""FreezeMultiPatientTwoFromUIActual.xml"" file by executing the query ""Select Top 1 XmlMessage from OdmSubscriberDetail where StudyEventKey = 4 and XmlMessage like '%Description=""Patient State""%'+(Select SubjectKey from Patient where PatientIdentity = '03-PAT')+'%' order by OdmSubscriberDetailKey desc""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 321
 testRunner.And("I have the XML file \"FreezeMultiPatientTwoFromUIExpected.xml\" available in the pr" +
                    "oject folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 322
 testRunner.And("I have the XML file \"FreezeMultiPatientTwoFromUIActual.xml\" available in the Test" +
                    " XML Files folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "TagName",
                        "FieldName"});
            table21.AddRow(new string[] {
                        "",
                        "CreationDateTime"});
            table21.AddRow(new string[] {
                        "",
                        "DateTimeStamp"});
            table21.AddRow(new string[] {
                        "",
                        "SubjectKey"});
            table21.AddRow(new string[] {
                        "",
                        "SourceID"});
            table21.AddRow(new string[] {
                        "",
                        "FileOID"});
            table21.AddRow(new string[] {
                        "",
                        "SourceSystemVersion"});
#line 323
 testRunner.Then("I verify that the data in both XML files is same except for below tags and fields" +
                    ".", ((string)(null)), table21, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T31_Lock the patient")]
        public virtual void T31_LockThePatient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T31_Lock the patient", null, ((string[])(null)));
#line 333
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 334
 testRunner.Given("I click ActionPalette Item \"Lock Patients\" in \"PatientSiteActions\" ActionPalette", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "PatientID"});
            table22.AddRow(new string[] {
                        "02-PAT"});
            table22.AddRow(new string[] {
                        "03-PAT"});
#line 335
 testRunner.When("I select patients to lock in LockPatientsPage", ((string)(null)), table22, "When ");
#line 339
 testRunner.And("I click on Save button on in LockPatientsPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 340
 testRunner.Then("I verify the success message displayed as \"Lock Patients Successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T32_Verify the XML Data evented out for the Locked Multiple Patient from Datalabs" +
            " UI")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:3.1.2.5")]
        public virtual void T32_VerifyTheXMLDataEventedOutForTheLockedMultiplePatientFromDatalabsUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T32_Verify the XML Data evented out for the Locked Multiple Patient from Datalabs" +
                    " UI", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:3.1.2.5"});
#line 342
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 343
 testRunner.Given(@"I save the Event XML data in ""LockMultiPatientOneFromUIActual.xml"" file by executing the query ""Select Top 1 XmlMessage from OdmSubscriberDetail where StudyEventKey = 4 and XmlMessage like '%Description=""Patient State""%'+(Select SubjectKey from Patient where PatientIdentity = '02-PAT')+'%' order by OdmSubscriberDetailKey desc""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 344
 testRunner.And("I have the XML file \"LockMultiPatientOneFromUIExpected.xml\" available in the proj" +
                    "ect folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 345
 testRunner.And("I have the XML file \"LockMultiPatientOneFromUIActual.xml\" available in the Test X" +
                    "ML Files folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "TagName",
                        "FieldName"});
            table23.AddRow(new string[] {
                        "",
                        "CreationDateTime"});
            table23.AddRow(new string[] {
                        "",
                        "DateTimeStamp"});
            table23.AddRow(new string[] {
                        "",
                        "SubjectKey"});
            table23.AddRow(new string[] {
                        "",
                        "SourceID"});
            table23.AddRow(new string[] {
                        "",
                        "FileOID"});
            table23.AddRow(new string[] {
                        "",
                        "SourceSystemVersion"});
#line 346
 testRunner.Then("I verify that the data in both XML files is same except for below tags and fields" +
                    ".", ((string)(null)), table23, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T33_Verify the XML Data evented out for the Locked Multiple Patient from Datalabs" +
            " UI")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:3.1.2.5")]
        public virtual void T33_VerifyTheXMLDataEventedOutForTheLockedMultiplePatientFromDatalabsUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T33_Verify the XML Data evented out for the Locked Multiple Patient from Datalabs" +
                    " UI", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:3.1.2.5"});
#line 356
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 357
 testRunner.Given(@"I save the Event XML data in ""LockMultiPatientTwoFromUIActual.xml"" file by executing the query ""Select Top 1 XmlMessage from OdmSubscriberDetail where StudyEventKey = 4 and XmlMessage like '%Description=""Patient State""%'+(Select SubjectKey from Patient where PatientIdentity = '03-PAT')+'%' order by OdmSubscriberDetailKey desc""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 358
 testRunner.And("I have the XML file \"LockMultiPatientTwoFromUIExpected.xml\" available in the proj" +
                    "ect folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 359
 testRunner.And("I have the XML file \"LockMultiPatientTwoFromUIActual.xml\" available in the Test X" +
                    "ML Files folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "TagName",
                        "FieldName"});
            table24.AddRow(new string[] {
                        "",
                        "CreationDateTime"});
            table24.AddRow(new string[] {
                        "",
                        "DateTimeStamp"});
            table24.AddRow(new string[] {
                        "",
                        "SubjectKey"});
            table24.AddRow(new string[] {
                        "",
                        "SourceID"});
            table24.AddRow(new string[] {
                        "",
                        "FileOID"});
            table24.AddRow(new string[] {
                        "",
                        "SourceSystemVersion"});
#line 360
 testRunner.Then("I verify that the data in both XML files is same except for below tags and fields" +
                    ".", ((string)(null)), table24, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T34_Unlock Patient")]
        public virtual void T34_UnlockPatient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T34_Unlock Patient", null, ((string[])(null)));
#line 370
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 371
  testRunner.Given("I click ActionPalette Item \"Unlock Patients\" in \"PatientSiteActions\" ActionPalett" +
                    "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "PatientID"});
            table25.AddRow(new string[] {
                        "02-PAT"});
            table25.AddRow(new string[] {
                        "03-PAT"});
#line 372
  testRunner.When("I select patients to Unlock in UnlockPatientsPage", ((string)(null)), table25, "When ");
#line 376
  testRunner.And("I click on Save button on in UnlockPatientsPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 377
  testRunner.Then("I verify the success message displayed as \"Unlock Patients Successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T35_Verify the XML Data evented out for the Unlocked Multiple Patient from Datala" +
            "bs UI")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:3.1.2.5")]
        public virtual void T35_VerifyTheXMLDataEventedOutForTheUnlockedMultiplePatientFromDatalabsUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T35_Verify the XML Data evented out for the Unlocked Multiple Patient from Datala" +
                    "bs UI", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:3.1.2.5"});
#line 379
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 380
 testRunner.Given(@"I save the Event XML data in ""UnlockMultiPatientOneFromUIActual.xml"" file by executing the query ""Select Top 1 XmlMessage from OdmSubscriberDetail where StudyEventKey = 4 and XmlMessage like '%Description=""Patient State""%'+(Select SubjectKey from Patient where PatientIdentity = '02-PAT')+'%' order by OdmSubscriberDetailKey desc""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 381
 testRunner.And("I have the XML file \"UnlockMultiPatientOneFromUIExpected.xml\" available in the pr" +
                    "oject folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 382
 testRunner.And("I have the XML file \"UnlockMultiPatientOneFromUIActual.xml\" available in the Test" +
                    " XML Files folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "TagName",
                        "FieldName"});
            table26.AddRow(new string[] {
                        "",
                        "CreationDateTime"});
            table26.AddRow(new string[] {
                        "",
                        "DateTimeStamp"});
            table26.AddRow(new string[] {
                        "",
                        "SubjectKey"});
            table26.AddRow(new string[] {
                        "",
                        "SourceID"});
            table26.AddRow(new string[] {
                        "",
                        "FileOID"});
            table26.AddRow(new string[] {
                        "",
                        "SourceSystemVersion"});
#line 383
 testRunner.Then("I verify that the data in both XML files is same except for below tags and fields" +
                    ".", ((string)(null)), table26, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T36_Verify the XML Data evented out for the Unlocked Multiple Patient from Datala" +
            "bs UI")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:3.1.2.5")]
        public virtual void T36_VerifyTheXMLDataEventedOutForTheUnlockedMultiplePatientFromDatalabsUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T36_Verify the XML Data evented out for the Unlocked Multiple Patient from Datala" +
                    "bs UI", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:3.1.2.5"});
#line 393
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 394
 testRunner.Given(@"I save the Event XML data in ""UnlockMultiPatientTwoFromUIActual.xml"" file by executing the query ""Select Top 1 XmlMessage from OdmSubscriberDetail where StudyEventKey = 4 and XmlMessage like '%Description=""Patient State""%'+(Select SubjectKey from Patient where PatientIdentity = '03-PAT')+'%' order by OdmSubscriberDetailKey desc""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 395
 testRunner.And("I have the XML file \"UnlockMultiPatientTwoFromUIExpected.xml\" available in the pr" +
                    "oject folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 396
 testRunner.And("I have the XML file \"UnlockMultiPatientTwoFromUIActual.xml\" available in the Test" +
                    " XML Files folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "TagName",
                        "FieldName"});
            table27.AddRow(new string[] {
                        "",
                        "CreationDateTime"});
            table27.AddRow(new string[] {
                        "",
                        "DateTimeStamp"});
            table27.AddRow(new string[] {
                        "",
                        "SubjectKey"});
            table27.AddRow(new string[] {
                        "",
                        "SourceID"});
            table27.AddRow(new string[] {
                        "",
                        "FileOID"});
            table27.AddRow(new string[] {
                        "",
                        "SourceSystemVersion"});
#line 397
 testRunner.Then("I verify that the data in both XML files is same except for below tags and fields" +
                    ".", ((string)(null)), table27, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T37_Thaw the Patient")]
        public virtual void T37_ThawThePatient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T37_Thaw the Patient", null, ((string[])(null)));
#line 407
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 408
  testRunner.Given("I click ActionPalette Item \"Thaw Patients\" in \"PatientSiteActions\" ActionPalette", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "PatientID"});
            table28.AddRow(new string[] {
                        "02-PAT"});
            table28.AddRow(new string[] {
                        "03-PAT"});
#line 409
  testRunner.When("I select patients to Thaw in ThawPatientsPage", ((string)(null)), table28, "When ");
#line 413
  testRunner.And("I click on Save button on in ThawPatientsPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 414
  testRunner.Then("I verify the success message displayed as \"Thaw Patients Successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T38_Verify the XML Data evented out for the Thaw Patient from Datalabs UI")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:3.1.2.5")]
        public virtual void T38_VerifyTheXMLDataEventedOutForTheThawPatientFromDatalabsUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T38_Verify the XML Data evented out for the Thaw Patient from Datalabs UI", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:3.1.2.5"});
#line 416
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 417
 testRunner.Given(@"I save the Event XML data in ""ThawMultiPatientOneFromUIActual.xml"" file by executing the query ""Select Top 1 XmlMessage from OdmSubscriberDetail where StudyEventKey = 4 and XmlMessage like '%Description=""Patient State""%'+(Select SubjectKey from Patient where PatientIdentity = '02-PAT')+'%' order by OdmSubscriberDetailKey desc""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 418
 testRunner.And("I have the XML file \"ThawMultiPatientOneFromUIExpected.xml\" available in the proj" +
                    "ect folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 419
 testRunner.And("I have the XML file \"ThawMultiPatientOneFromUIActual.xml\" available in the Test X" +
                    "ML Files folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "TagName",
                        "FieldName"});
            table29.AddRow(new string[] {
                        "",
                        "CreationDateTime"});
            table29.AddRow(new string[] {
                        "",
                        "DateTimeStamp"});
            table29.AddRow(new string[] {
                        "",
                        "SubjectKey"});
            table29.AddRow(new string[] {
                        "",
                        "SourceID"});
            table29.AddRow(new string[] {
                        "",
                        "FileOID"});
            table29.AddRow(new string[] {
                        "",
                        "SourceSystemVersion"});
#line 420
 testRunner.Then("I verify that the data in both XML files is same except for below tags and fields" +
                    ".", ((string)(null)), table29, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T39_Verify the XML Data evented out for the Thaw Patient from Datalabs UI")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        [NUnit.Framework.CategoryAttribute("ReqID:3.1.2.5")]
        public virtual void T39_VerifyTheXMLDataEventedOutForTheThawPatientFromDatalabsUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T39_Verify the XML Data evented out for the Thaw Patient from Datalabs UI", null, new string[] {
                        "ObjectiveEvidence",
                        "ReqID:3.1.2.5"});
#line 430
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 431
 testRunner.Given(@"I save the Event XML data in ""ThawMultiPatientTwoFromUIActual.xml"" file by executing the query ""Select Top 1 XmlMessage from OdmSubscriberDetail where StudyEventKey = 4 and XmlMessage like '%Description=""Patient State""%'+(Select SubjectKey from Patient where PatientIdentity = '03-PAT')+'%' order by OdmSubscriberDetailKey desc""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 432
 testRunner.And("I have the XML file \"ThawMultiPatientTwoFromUIExpected.xml\" available in the proj" +
                    "ect folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 433
 testRunner.And("I have the XML file \"ThawMultiPatientTwoFromUIActual.xml\" available in the Test X" +
                    "ML Files folder.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "TagName",
                        "FieldName"});
            table30.AddRow(new string[] {
                        "",
                        "CreationDateTime"});
            table30.AddRow(new string[] {
                        "",
                        "DateTimeStamp"});
            table30.AddRow(new string[] {
                        "",
                        "SubjectKey"});
            table30.AddRow(new string[] {
                        "",
                        "SourceID"});
            table30.AddRow(new string[] {
                        "",
                        "FileOID"});
            table30.AddRow(new string[] {
                        "",
                        "SourceSystemVersion"});
#line 434
 testRunner.Then("I verify that the data in both XML files is same except for below tags and fields" +
                    ".", ((string)(null)), table30, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

