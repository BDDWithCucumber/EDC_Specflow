// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EDC_Automation.Features.Webfocus
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Reporting_DatalabsStandardReport_OutstandingSDVDisplay")]
    public partial class Reporting_DatalabsStandardReport_OutstandingSDVDisplayFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Reporting_Standard Report.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Reporting_DatalabsStandardReport_OutstandingSDVDisplay", "\t\tThis feature is to verify the display of outstanding SDV form fields", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T01_Login to WebFocus portal")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        public virtual void T01_LoginToWebFocusPortal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T01_Login to WebFocus portal", null, new string[] {
                        "ObjectiveEvidence"});
#line 5
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
 testRunner.When("I logged in to WebFocus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
 testRunner.Then("I see WebFocus HomePage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T02_Select the Study and Select Outstanding SDV")]
        [NUnit.Framework.CategoryAttribute("ObjectiveEvidence")]
        public virtual void T02_SelectTheStudyAndSelectOutstandingSDV()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T02_Select the Study and Select Outstanding SDV", null, new string[] {
                        "ObjectiveEvidence"});
#line 10
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
 testRunner.When("I select \"Domains\" item from main menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.And("I select the Study \"ASZ817_UAT_AZ232703\" from Domains main page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("I select \"Standard Reports\" from Study Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("I select \"DataLabs Standard Reports\" from Standard Report Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("I select \"CRFs\" from DataLabs Standard Reports page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("I select \"OUTSTANDING SDV\" from CRFs Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.Then("I see the Main panel Titled \"Outstanding SDV (by Site)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.And("I see the \"Filters:\" subtitle has the link \"Reset Filters\" flushed right", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.And("I see all menu filters default selected as \"ALL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Country:"});
            table1.AddRow(new string[] {
                        "ALL"});
            table1.AddRow(new string[] {
                        "< No Country >"});
            table1.AddRow(new string[] {
                        "BULGARIA"});
            table1.AddRow(new string[] {
                        "GERMANY"});
            table1.AddRow(new string[] {
                        "HUNGARY"});
            table1.AddRow(new string[] {
                        "JAPAN"});
            table1.AddRow(new string[] {
                        "POLAND"});
            table1.AddRow(new string[] {
                        "SOUTH AFRICA"});
            table1.AddRow(new string[] {
                        "UKRAINE"});
            table1.AddRow(new string[] {
                        "UNITED STATES"});
#line 20
 testRunner.And("I see Country menu displayed below items", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Site:"});
            table2.AddRow(new string[] {
                        "ALL"});
#line 33
 testRunner.And("I see Site menu displayed below items", ((string)(null)), table2, "And ");
#line 36
 testRunner.And("I see Minutes per CRF: label displayed \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.And("I see Include Investigator Radio button selected Yes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelectaFormat:"});
            table3.AddRow(new string[] {
                        "HTML"});
            table3.AddRow(new string[] {
                        "Excel"});
#line 38
 testRunner.And("I see the Select Format sub-title with the below options", ((string)(null)), table3, "And ");
#line 42
 testRunner.And("I see View button flushed right", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T03_Excel Report Format display")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void T03_ExcelReportFormatDisplay()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T03_Excel Report Format display", null, new string[] {
                        "ignore"});
#line 45
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 46
 testRunner.When("I select Include Investigator as \"No\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.And("I select Format as \"Excel\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.And("I select View button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.And("I Open the Excel downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.Then("I see an excel report is produced titled as \"Outstanding SDV (by Site)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "GridNames:"});
            table4.AddRow(new string[] {
                        "Country"});
            table4.AddRow(new string[] {
                        "City"});
            table4.AddRow(new string[] {
                        "Site Name – [Does not includes investigator]"});
            table4.AddRow(new string[] {
                        "Site"});
            table4.AddRow(new string[] {
                        "Need SDV-All CRFs"});
            table4.AddRow(new string[] {
                        "Need SDV-Completed CRFs"});
            table4.AddRow(new string[] {
                        "Need SDV- Required Items"});
            table4.AddRow(new string[] {
                        "Est. Total Onsite Workload (hrs)"});
            table4.AddRow(new string[] {
                        "A summary row"});
#line 51
 testRunner.And("I see the grid with rows of data in the columns named below", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Note:"});
            table5.AddRow(new string[] {
                        @"[Need SDV- All CRFs]- includes Incomplete and Submitted CRFs with required SDV [Need SDV- Completed CRFs]- only includes Submitted CRFs with required SDV Report excludes Mark Not Collected CRFs Workload is based on Completed CRFs and includes 1.5 hours routine time."});
#line 62
 testRunner.And("I see a note displyed below", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Footer:"});
            table6.AddRow(new string[] {
                        "Copyright © 2011 DataLabs, Inc. All rights reserved"});
            table6.AddRow(new string[] {
                        "Report Run"});
            table6.AddRow(new string[] {
                        "Data Last Update"});
#line 65
 testRunner.And("I see the footer displayed", ((string)(null)), table6, "And ");
#line 70
 testRunner.And("I close the excel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T04_HTML Report format display")]
        public virtual void T04_HTMLReportFormatDisplay()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T04_HTML Report format display", null, ((string[])(null)));
#line 73
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 74
 testRunner.When("I enter Minuter per CRF as \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.And("I select format as \"HTML\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.And("I select the View button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.Then("I see HTML report is produced with title \"Outstanding SDV (by Site)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "GridNames:"});
            table7.AddRow(new string[] {
                        "Country"});
            table7.AddRow(new string[] {
                        "City"});
            table7.AddRow(new string[] {
                        "Site Name – [Does not includes investigator]"});
            table7.AddRow(new string[] {
                        "Site"});
            table7.AddRow(new string[] {
                        "Need SDV-All CRFs"});
            table7.AddRow(new string[] {
                        "Need SDV-Completed CRFs"});
            table7.AddRow(new string[] {
                        "Need SDV- Required Items"});
            table7.AddRow(new string[] {
                        "Est. Total Onsite Workload (hrs)"});
#line 78
 testRunner.And("I see the grid with rows of data in the columns named below", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Note:"});
            table8.AddRow(new string[] {
                        @"[Need SDV- All CRFs]- includes Incomplete and Submitted CRFs with required SDV [Need SDV- Completed CRFs]- only includes Submitted CRFs with required SDV Report excludes Mark Not Collected CRFs Workload is based on Completed CRFs and includes 1.5 hours routine time."});
#line 88
 testRunner.And("I see a note displyed below", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Footer:"});
            table9.AddRow(new string[] {
                        "Copyright © 2011 DataLabs, Inc. All rights reserved"});
            table9.AddRow(new string[] {
                        "Run Date:"});
            table9.AddRow(new string[] {
                        "Data Last Updated:"});
#line 91
 testRunner.And("I see the footer displayed", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T05_Reset filter")]
        public virtual void T05_ResetFilter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T05_Reset filter", null, ((string[])(null)));
#line 97
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 98
 testRunner.When("I select country as \"Argentina\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.And("I select site as \"4444-Psite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
 testRunner.And("I select link Reset Filters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.Then("I see \"Country\" list displayed \"All\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 102
 testRunner.And("I see \"Site\" list displayed \"All\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
 testRunner.And("I see Minutes per CRF: label displayed \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T06_Post Reset Filter criteria check")]
        public virtual void T06_PostResetFilterCriteriaCheck()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T06_Post Reset Filter criteria check", null, ((string[])(null)));
#line 105
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 106
 testRunner.When("I select country as \"Argentina\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 107
 testRunner.And("I select site as \"4444-Psite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
 testRunner.And("I select the View button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
 testRunner.Then("I see HTML report is produced with title \"Outstanding SDV (by Site)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "GridNames:"});
            table10.AddRow(new string[] {
                        "Country"});
            table10.AddRow(new string[] {
                        "City"});
            table10.AddRow(new string[] {
                        "Site Name – [Does not includes investigator]"});
            table10.AddRow(new string[] {
                        "Site"});
            table10.AddRow(new string[] {
                        "Need SDV-All CRFs"});
            table10.AddRow(new string[] {
                        "Need SDV-Completed CRFs"});
            table10.AddRow(new string[] {
                        "Need SDV- Required Items"});
            table10.AddRow(new string[] {
                        "Est. Total Onsite Workload (hrs)"});
#line 110
 testRunner.And("I see the grid with rows of data in the columns named below", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Note:"});
            table11.AddRow(new string[] {
                        @"[Need SDV- All CRFs]- includes Incomplete and Submitted CRFs with required SDV [Need SDV- Completed CRFs]- only includes Submitted CRFs with required SDV Report excludes Mark Not Collected CRFs Workload is based on Completed CRFs and includes 1.5 hours routine time."});
#line 120
 testRunner.And("I see a note displyed below", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Footer:"});
            table12.AddRow(new string[] {
                        "Copyright © 2011 DataLabs, Inc. All rights reserved"});
            table12.AddRow(new string[] {
                        "Report Run"});
            table12.AddRow(new string[] {
                        "Data Last Update"});
#line 123
 testRunner.And("I see the footer displayed", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

